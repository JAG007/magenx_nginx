   ## Maps config file JAG
   include conf_m2/maps.conf;

   ## certbot-auto renew webroot
#  server {
#    listen 80;
#    server_name example.com;
#
#    location ~ /\.well-known/acme-challenge {
#        root $MAGE_ROOT/pub;
#    }
#
#    location / { return 301 https://example.com$request_uri;  }
#  }

   ## Proxy server to terminate ssl before varnish
   server {
   listen 80;
#  listen 443 ssl http2;
   server_name example.com;
   
    ## Gzipping is an easy way to reduce page weight
    gzip                on;
    gzip_vary           on;
    gzip_proxied        any;
    gzip_types          application/javascript application/x-javascript application/rss+xml text/javascript text/css text/plain image/x-icon image/svg+xml;
    gzip_buffers        4 16k;
    gzip_comp_level     6;
    
    # Brotli compression alternative to Gzip
    #brotli              on;
    #brotli_types        text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap;
    #brotli_comp_level   8;
   
   if ($bad_client) { return 403; }
     
   ## Server maintenance block.
    include conf_m2/maintenance.conf;
    
   ## SSL key and cert location
#    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem; 
#    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

   ## Proxy-pass to Varnish
  location / {
    include /etc/nginx/conf_m2/varnish_proxy.conf;
  }
 }

  server {
   listen 127.0.0.1:8080;
   server_name example.com;
   
   ## Set Magento root folder	
   set $MAGE_ROOT /var/www/html;	
   ## Set main public directory /pub	
   root $MAGE_ROOT/pub;
   
   ## sitemap and feeds?
   location ^/(robots\.txt|google.*\.html) { root $MAGE_ROOT/pub/media; }
   location ^/sitemap\.xml { root $MAGE_ROOT/pub/media/sitemap; }
   location ~ ^/feeds/.*\.(xml|csv|txt) { root $MAGE_ROOT/pub/media; }
	
   ## phpMyAdmin configuration
   include conf_m2/phpmyadmin.conf;
	
   ## Nginx and php-fpm status
   include conf_m2/status.conf;
	
   ## Magento Setup Tool
   include conf_m2/setup.conf;
	
   ## Deny all internal locations
   location ~ ^/(app|generated|lib|bin|var|tmp|phpserver|vendor)/ { 
     deny all; 
   }
	   
   location / {
     try_files $uri $uri/ /index.php$is_args$args;
   }
	
   ## Error log/page
#  include conf_m2/error_page.conf;
	
   ## Static location
   include conf_m2/assets.conf;
  
   ## Protect extra directories
   include conf_m2/extra_protect.conf;
	   
   ## Process php files (strict rule, define files to be executed)
   location ~ ^/(index|health_check|get|static|errors/(report|404|503))\.php$ {
     try_files $uri =404;
#    fastcgi_intercept_errors on;
     include conf_m2/php_backend.conf;
     
     ## Enable Magento profiler
#    fastcgi_param MAGE_PROFILER $MAGE_PROFILER;

     ## Store code with multi domain
#    fastcgi_param   MAGE_RUN_CODE $MAGE_RUN_CODE;
#    fastcgi_param   MAGE_RUN_TYPE $MAGE_RUN_TYPE;

     ## Enable POST logging
#    if ($request_method = POST) {set $ispostlog A;}
#    if ($request_uri ~* "/LOCATION_PLACEHOLDER/") {set $ispostlog "${ispostlog}B";}
#    if ($ispostlog = AB) { access_log /var/log/nginx/postlog.log postlog;}
   }
	
   ## Block other undefined php files, possible injections and random malware hooks.
   location ~* \.php$ { 
     return 404; 
   }
  }
